name: Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:  # Allow manual trigger

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix - test fewer combinations
          - os: macos-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.9"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Install build tools (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Install build tools (macOS)
        if: runner.os == 'macOS'
        run: |
          # Xcode command line tools should be pre-installed on GitHub runners
          xcode-select --install 2>/dev/null || true

      - name: Build C++ extension
        id: cpp_build
        continue-on-error: true  # Don't fail if C++ build fails
        run: |
          pip install pybind11
          python setup.py build_ext --inplace

      - name: Check C++ availability
        run: |
          python -c "from Search import HAS_CPP; print(f'C++ available: {HAS_CPP}')"

      - name: Run tests (skip slow)
        run: |
          pytest tests/ tests_api/ -v -m "not slow" --cov=. --cov-report=xml --cov-report=term

      - name: Run slow tests
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          pytest tests/ tests_api/ -v -m "slow"

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install linting tools
        run: |
          pip install flake8 black mypy

      - name: Run flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check formatting with black
        run: |
          black --check .
        continue-on-error: true  # Don't fail on formatting (just warn)